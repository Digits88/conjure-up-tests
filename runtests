#!/bin/bash

set -eux

SPELLDIR=/snap/conjure-up/current/spells

# Only run core spell tests
: ${CORE_ONLY:=0}

# Only run a single test
: ${SPELLTEST:=""}

# Override cloud to test
: ${CLOUD:=localhost}

# Keep controller?
: ${KEEP:=0}

# Snap channel
: ${CHANNEL:=edge}

export DEBIAN_FRONTEND=noninteractive
sudo -E apt-get -q update
sudo -E apt-get install -qyf -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold git python3-yaml apt-cacher-ng cpanminus build-essential libtest-harness-perl || true
sudo -E apt-get -qyf -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold dist-upgrade

if ! snap info conjure-up|grep -q "installed"; then
    printf "Installing conjure-up from %s release\n" "$CHANNEL"
    sudo snap install conjure-up --classic --$CHANNEL > /dev/null 2>&1 || true
else
    printf "Upgrading conjure-up from %s release\n" "$CHANNEL"
    sudo snap refresh conjure-up --classic --$CHANNEL > /dev/null 2>&1 || true
fi

printf "Sanitizing cache directory"
rm -rf ~/.cache/conjure-up* || true

printf "Remove Kubernetes specific configs"
rm -rf ~/.kube || true
rm -rf ~/bin/kube* || true

export PATH=/snap/bin:$PATH
export JUJU_MODEL=conjure-up-test
export JUJU_CONTROLLER=conjure-up-controller
export CONJURE_UP_SPELLSDIR=$SPELLDIR
export CLOUD=$CLOUD

printf "Juju Version: $(conjure-up.juju version)\n"
printf "LXD Version: $(conjure-up.lxd --version)\n"
printf "$(conjure-up --version)\n"

core_spells=(kubernetes-core canonical-kubernetes openstack-novalxd)

spells=(hadoop-kafka \
            hadoop-processing \
            hadoop-spark \
            realtime-syslog-analytics \
            spark-processing \
            ghost)

do_test() {
    _spell=$1
    _hostname=$(hostname -i)
    printf "Setting APT proxy http://$_hostname:3142\n"
    conjure-up -d --notrack --noreport $_spell $CLOUD $JUJU_CONTROLLER $JUJU_MODEL \
               --apt-proxy=http://$_hostname:3142 \
               --apt-https-proxy=http://$_hostname:3142
    RET=$?
    if [ $RET -ne "0" ]; then
        exit $RET
    fi

    if [ -f $SPELLDIR/$_spell/tests/verify ]; then
        sleep 20
        printf "Verifying $_spell\n"
        # Expose spells dir here since the tests will not inherit env vars from conjure-up
        $SPELLDIR/$_spell/tests/verify
        RET=$?
        if [ $RET -ne "0" ]; then
            exit $RET
        fi
    fi
    tear_down_model || true
}

tear_down_model() {
    printf "Destroying $JUJU_MODEL if exists\n"
    juju destroy-model -y $JUJU_MODEL > /dev/null 2>&1
}

tear_down() {
    if [ "$KEEP" -eq "0" ]; then
        printf "Destroying $JUJU_CONTROLLER\n"
        juju kill-controller -y $JUJU_CONTROLLER > /dev/null 2>&1
    fi
}

run_core_spells() {
    printf "Running core spell tests\n"
    for spell in ${core_spells[@]}; do
        do_test $spell
    done
}

run_extended_spells() {
    printf "Running extended spell tests\n"
    for spell in ${spells[@]}; do
        do_test $spell
    done
}

tear_down_model || true

if [ "$SPELLTEST" != "" ]; then
    printf "Running single test for $SPELLTEST\n"
    do_test $SPELLTEST
    tear_down_model || true
    exit
fi

if [ "$CORE_ONLY" -eq "1" ]; then
    run_core_spells
    tear_down_model || true
    exit
else
    run_core_spells
    run_extended_spells
fi

tear_down || true

exit 0
